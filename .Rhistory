(16/80)/(50/165)
(16*165)/(80*50)
stratum1;stratum2
addmargins(stratum1);addmargins(stratum2)
(((16*165)/311)+((41*20)/136))/(((80*50)/311)+((38*37)/136))
(commonOR.manual<-(((16*165)/311)+((41*20)/136))/(((80*50)/311)+((38*37)/136)))
(both.strata<-array(dim=c(2,2,2), c(stratum1,stratum2)))
mantelhaen.test(both.strata, correct = FALSE)
mantelhaen.test(both.strata)
?qplot
library(ggplot2)
?qplot
ggplot(data=OurData, aes(x=x, y=p.III)) +
ggtitle("Probability as a function of X with three different\ncombinations of B0 and B1") +
ylab("p") +
scale_y_continuous(limits=c(0,1),
breaks=seq(from=0,to=1,by=0.1)) +
scale_x_continuous(breaks=seq(from=-1,to=1,by=0.2)) +
geom_line(aes(y=p.I,x=x,color="p.I")) +
geom_line(aes(y=p.II,x=x,color="p.II")) +
geom_line(aes(y=p.III,x=x,color="p.III"))
knitr::opts_chunk$set(echo = TRUE)
(crosstab<-matrix(ncol = 2,c(647,2,622,27),dimnames =
list(c("smoker","non-smoker"),c("cases","controls"))))
addmargins(crosstab)
(odds.smoke.cases<-(647/649)/(1-(647/649)))
(odds.smoke.controls<-(622/649)/(1-(622/649)))
(OR.smoking<-odds.smoke.cases/odds.smoke.controls)
chisq.test(crosstab, correct = FALSE)
addmargins(crosstab2 <- matrix(ncol=2,
c(57,87,118,185),
dimnames = list(c("exposed","non-exposed"),
c("ill","healthy"))))
chisq.test(crosstab2, correct = FALSE)
(stratum1<-matrix(ncol=2, c(16,50,80,165),
dimnames=list(c("exposed","non-exposed"),"Stratum 1"=c("ill","healthy"))))
(stratum2<-matrix(ncol=2, c(41,37,38,20),
dimnames=list(c("exposed","non-exposed"),"Stratum 2"=c("ill","healthy"))))
(OR.stratum1<-(16/80)/(50/165))
(OR.stratum2<-(41/38)/(37/20))
(x2.stratum1<-chisq.test(stratum1, correct = FALSE))
(x2.stratum2<-chisq.test(stratum2, correct = FALSE))
(commonOR.manual<-(((16*165)/311)+((41*20)/136))/(((80*50)/311)+((38*37)/136)))
(both.strata<-array(dim=c(2,2,2), c(stratum1,stratum2)))
mantelhaen.test(both.strata, correct = FALSE)
n <- 30
i <- 1:n
x <- (i-15.5)/14.5
B0.I <- log(0.3/(1-0.3))
B1.I <- 2
logodds.I <- B0.I + B1.I*x[i]
p.I <- exp(logodds.I)/(1+exp(logodds.I))
library(ggplot2)
qplot(x,p.I,geom = "line",main=("p = logit^-1(B0.I + B1.I*x)"), ylab="p")
#Second model:
B0.II <- log(0.3/(1-0.3))
B1.II <- -2
logodds.II <- B0.II + B1.II*x[i]
p.II <- exp(logodds.II)/(1+exp(logodds.II))
#Third model:
B0.III <- log(0.7/(1-0.7))
B1.III <- 2
logodds.III <- B0.III + B1.III*x[i]
p.III <- exp(logodds.III)/(1+exp(logodds.III))
#Storing all this data in one data frame (for plotting purposes):
OurData <- data.frame(i, x,
B0.I, B1.I, logodds.I, p.I,
B0.II, B1.II, logodds.II, p.II,
B0.III, B1.III, logodds.III, p.III)
#Plotting the three models in one chart:
ggplot(data=OurData, aes(x=x, y=p.III)) +
ggtitle("Probability as a function of X with three different\ncombinations of B0 and B1") +
ylab("p") +
scale_y_continuous(limits=c(0,1),
breaks=seq(from=0,to=1,by=0.1)) +
scale_x_continuous(breaks=seq(from=-1,to=1,by=0.2)) +
geom_line(aes(y=p.I,x=x,color="p.I")) +
geom_line(aes(y=p.II,x=x,color="p.II")) +
geom_line(aes(y=p.III,x=x,color="p.III"))
ggplot(data=OurData, aes(x=x, y=p.III)) +
ggtitle("Probability as a function of X with three different\ncombinations of B0 and B1") +
ylab("p") +
scale_y_continuous(limits=c(0,1),
breaks=seq(from=0,to=1,by=0.1)) +
scale_x_continuous(breaks=seq(from=-1,to=1,by=0.2)) +
geom_line(aes(y=p.I,x=x,color="p.I")) +
geom_line(aes(y=p.II,x=x,color="p.II")) +
geom_line(aes(y=p.III,x=x,color="p.III"))
ggplot(data=OurData, aes(x=x, y=p.III)) +
ggtitle("Probability as a function of X with three different\ncombinations of B0 and B1") +
ylab("p") +
scale_y_continuous(limits=c(0,1),
breaks=seq(from=0,to=1,by=0.1)) +
scale_x_continuous(breaks=seq(from=-1,to=1,by=0.2)) +
geom_line(aes(y=p.I,x=x,color="p.I")) +
geom_line(aes(y=p.II,x=x,color="p.II")) +
geom_line(aes(y=p.III,x=x,color="p.III"))
ggplot(data=OurData, aes(x=x, y=p.I)) +
ggtitle("Probability as a function of X with three different\ncombinations of B0 and B1") +
ylab("p") +
scale_y_continuous(limits=c(0,1),
breaks=seq(from=0,to=1,by=0.1)) +
scale_x_continuous(breaks=seq(from=-1,to=1,by=0.2)) +
geom_line(aes(y=p.I,x=x,color="p.I")) +
geom_line(aes(y=p.II,x=x,color="p.II")) +
geom_line(aes(y=p.III,x=x,color="p.III"))
ggplot(data=OurData, aes(x=x, y=p.III)) +
ggtitle("Probability as a function of X with three different\ncombinations of B0 and B1") +
ylab("p") +
scale_y_continuous(limits=c(0,1),
breaks=seq(from=0,to=1,by=0.1)) +
scale_x_continuous(breaks=seq(from=-1,to=1,by=0.2)) +
geom_line(aes(y=p.I,x=x,color="p.I")) +
geom_line(aes(y=p.II,x=x,color="p.II")) +
geom_line(aes(y=p.III,x=x,color="p.III"))
ggplot(data=OurData, aes(x=x, y=p.I)) +
ggtitle("Probability as a function of X with three different\ncombinations of B0 and B1") +
ylab("p") +
scale_y_continuous(limits=c(0,1),
breaks=seq(from=0,to=1,by=0.1)) +
scale_x_continuous(breaks=seq(from=-1,to=1,by=0.2)) +
geom_line(aes(y=p.I,x=x,color="p.I")) +
geom_line(aes(y=p.II,x=x,color="p.II")) +
geom_line(aes(y=p.III,x=x,color="p.III"))
ggplot(data=OurData, aes(x=x, y=p.III)) +
ggtitle("Probability as a function of X with three different\ncombinations of B0 and B1") +
ylab("p") +
scale_y_continuous(limits=c(0,1),
breaks=seq(from=0,to=1,by=0.1)) +
scale_x_continuous(breaks=seq(from=-1,to=1,by=0.2)) +
geom_line(aes(y=p.I,x=x,color="p.I")) +
geom_line(aes(y=p.II,x=x,color="p.II")) +
geom_line(aes(y=p.III,x=x,color="p.III"))
ggplot(data=OurData, aes(x=x, y=p.I)) +
ggtitle("Probability as a function of X with three different\ncombinations of B0 and B1") +
ylab("p") +
scale_y_continuous(limits=c(0,1),
breaks=seq(from=0,to=1,by=0.1)) +
scale_x_continuous(breaks=seq(from=-1,to=1,by=0.2)) +
geom_line(aes(y=p.I,x=x,color="p.I")) +
geom_line(aes(y=p.II,x=x,color="p.II")) +
geom_line(aes(y=p.III,x=x,color="p.III"))
exp(-2)/(1+exp(-2))
p <- 0.119203
log(p/(1-p))
round(log(p/(1-p)),digits=10)
round(log(p/(1-p)),digits=5)
round(digits=5,
log(p/(1-p))
)
utf8<-function(input.file){scan(what="char",sep="\n",encoding="UTF-8",file=choose.files())} #Windows
putsi<-utf8()
putsi
putsi<-utf8()
putsi
prepare.text<-function(input.object,output.file="CleanedByRscript.txt"){
object.to.clean<-input.object
object.to.clean<-gsub("\u003ch\u003e","otsikkomerkki",object.to.clean,perl=T) #protect <h>
object.to.clean<-gsub("\u003cp\u003e","kappalemerkki",object.to.clean,perl=T) #protect <p>
object.to.clean<-gsub("(?<=\\w)\u002d(?=\\w)","yhdysviiva",object.to.clean,perl=T) #protect hyphen
object.to.clean<-gsub("\\\u002e{3}","kolmoispiste",object.to.clean,perl=T) #protect triple dot ... aka ellipsis symbol
object.to.clean<-gsub("\\\u002e(?=\\w)","suojattupiste",object.to.clean,perl=T) #protect dot in decimals, initials, URLs, abbreviations
object.to.clean<-gsub("(?<=suojattupiste\\w)\\\u002e","suojattupiste",object.to.clean,perl=T) #protect subsequent dot in longer abbreviations
object.to.clean<-gsub("(?<=\\d)\u002c(?=\\d)","tuhansienerotin",object.to.clean,perl=T) #protect thousands separator
object.to.clean<-gsub("\u003a\u002f{2}","urlmerkki",object.to.clean,perl=T) #protect :// in urls
object.to.clean<-gsub("(?<=\\w)\u002f","kenoviiva",object.to.clean,perl=T) #protect / in urls and fractions
object.to.clean<-gsub("[\u2018\u2019]","\u0027",object.to.clean,perl=T) #change typographic apostrophes into normal ones
object.to.clean<-gsub("\u0027(?=d\\W|m\\W|re\\W|s\\W|t\\W|ve\\W)","heittomerkki",object.to.clean,perl=T) # protect apostrophes that actually are apostrpohes.
object.to.clean<-gsub("nheittomerkkit","\u0020nheittomerkkit",object.to.clean,perl=T) #protect and separate n't
object.to.clean<-gsub("[\u201c\u201d]","\u0022",object.to.clean,perl=T) #change typographic quotation marks into normal ones
object.to.clean<-gsub("(No(?=\\\u002e\u0020\\d+)|Mr|Dr|Sen|Ms|Mrs|Rep|Lt|Prof|Col|Gen|Rev|Sgt|Mons|Cllr|Maj|Sergt|Sr|Coun|HMS|Pres|Supt|Jr|OBE|D|A)\\\u002e(?=\\W)","\\1suojattupiste",object.to.clean,perl=T) #protect dots in titles 1
object.to.clean<-gsub("\u00a3","puntamerkki",object.to.clean,perl=T);object.to.clean<-gsub("\\\u0024","dollarimerkki",object.to.clean,perl=T) #protect pound and dollar signs
object.to.clean<-gsub("\u20ac","euromerkki",object.to.clean,perl=T);object.to.clean<-gsub("(?<=\\d)\u003a(?=\\d)","kellonaikakaksoispiste",object.to.clean,perl=T) #protect euro sign and hour-minute separator
object.to.clean<-gsub("\u0025","prosenttimerkki",object.to.clean,perl=T) #protect percent sign
object.to.clean<-gsub("\u2030","promillemerkki",object.to.clean,perl=T) #protect permille sign
object.to.clean<-gsub("&#8209;","rikkomatonyhdysviiva",object.to.clean,perl=T)
object.to.clean<-gsub("\\b","\u0020",object.to.clean,perl=T) #separate remaining punctuation from words_________________________________________________________
object.to.clean<-gsub("yhdysviiva","\u002d",object.to.clean,perl=T);object.to.clean<-gsub("suojattupiste","\\\u002e",object.to.clean,perl=T) #restore hyphens and protected dots
object.to.clean<-gsub("tuhansienerotin","\u002c",object.to.clean,perl=T);object.to.clean<-gsub("nheittomerkkit","\u0020n\u0027t",object.to.clean,perl=T) #restore thousands separator&n't
object.to.clean<-gsub("kellonaikakaksoispiste","\u003a",object.to.clean,perl=T) #restore hour-minute separator
object.to.clean<-gsub("dollarimerkki","\\\u0024",object.to.clean,perl=T);object.to.clean<-gsub("puntamerkki","\u00a3",object.to.clean,perl=T) #restore dollar and pound signs
object.to.clean<-gsub("euromerkki","\u20ac",object.to.clean,perl=T);object.to.clean<-(gsub("heittomerkki","\u0020\u0027",object.to.clean,perl=T)) #restore euro sign and apostrophe
object.to.clean<-gsub("([^\\w\\s])([^\\w\\s])","\\1\u0020\\2\u0020",object.to.clean,perl=T) #separate contiguous punctuation marks
object.to.clean<-gsub("urlmerkki","\u003a\u002f\u002f",object.to.clean,perl=T) #restore :// in urls
object.to.clean<-gsub("kenoviiva","\u002f",object.to.clean,perl=T) #restore / in urls and fractions
object.to.clean<-gsub("otsikkomerkki","\u003ch\u003e",object.to.clean,perl=T);object.to.clean<-gsub("kappalemerkki","\u003cp\u003e",object.to.clean,perl=T) #restore <h> and <p>
object.to.clean<-gsub("kolmoispiste","\u0020\\\u002e\\\u002e\\\u002e\u0020",object.to.clean,perl=T) #restore ...
object.to.clean<-gsub("prosenttimerkki","\u0025",object.to.clean,perl=T) #restore percent sign
object.to.clean<-gsub("promillemerkki","\u2030",object.to.clean,perl=T) #restore permille sign
object.to.clean<-gsub("rikkomatonyhdysviiva","\u2011",object.to.clean,perl=T)
object.to.clean<-gsub("\u0024","\u0020",object.to.clean,perl=T) #make sure every line ends with a space as they do in the NOW corpus.
object.to.clean<-gsub("[\u0020]{2,}","\u0020",object.to.clean,perl=T);object.to.clean<-gsub("(?<=\u005e)\u0020+","",object.to.clean,perl=T) #truncate spaces
cat(object.to.clean,file=output.file,sep="\n") #output the result to the file specified (or the default one)
cat("The clean-up operations have been performed and the output printed to",output.file," and to the vector you (hopefully) specified. Good luck with the results!\n")
return(object.to.clean)}
prepare.text(putsi)
prepare.text<-function(input.object,output.file="CleanedByRscript.txt"){
object.to.clean<-input.object
object.to.clean<-gsub("\u003ch\u003e","otsikkomerkki",object.to.clean,perl=T) #protect <h>
object.to.clean<-gsub("\u003cp\u003e","kappalemerkki",object.to.clean,perl=T) #protect <p>
object.to.clean<-gsub("(?<=\\w)\u002d(?=\\w)","yhdysviiva",object.to.clean,perl=T) #protect hyphen
object.to.clean<-gsub("\\\u002e{3}","kolmoispiste",object.to.clean,perl=T) #protect triple dot ... aka ellipsis symbol
object.to.clean<-gsub("\\\u002e(?=\\w)","suojattupiste",object.to.clean,perl=T) #protect dot in decimals, initials, URLs, abbreviations
object.to.clean<-gsub("(?<=suojattupiste\\w)\\\u002e","suojattupiste",object.to.clean,perl=T) #protect subsequent dot in longer abbreviations
object.to.clean<-gsub("(?<=\\d)\u002c(?=\\d)","tuhansienerotin",object.to.clean,perl=T) #protect thousands separator
object.to.clean<-gsub("\u003a\u002f{2}","urlmerkki",object.to.clean,perl=T) #protect :// in urls
object.to.clean<-gsub("(?<=\\w)\u002f","kenoviiva",object.to.clean,perl=T) #protect / in urls and fractions
object.to.clean<-gsub("[\u2018\u2019]","\u0027",object.to.clean,perl=T) #change typographic apostrophes into normal ones
object.to.clean<-gsub("\u0027(?=d\\W|m\\W|re\\W|s\\W|t\\W|ve\\W)","heittomerkki",object.to.clean,perl=T) # protect apostrophes that actually are apostrpohes.
object.to.clean<-gsub("nheittomerkkit","\u0020nheittomerkkit",object.to.clean,perl=T) #protect and separate n't
object.to.clean<-gsub("[\u201c\u201d]","\u0022",object.to.clean,perl=T) #change typographic quotation marks into normal ones
object.to.clean<-gsub("(No(?=\\\u002e\u0020\\d+)|Mr|Dr|Sen|Ms|Mrs|Rep|Lt|Prof|Col|Gen|Rev|Sgt|Mons|Cllr|Maj|Sergt|Sr|Coun|HMS|Pres|Supt|Jr|St|OBE|D|A)\\\u002e(?=\\W)","\\1suojattupiste",object.to.clean,perl=T) #protect dots in titles 1
object.to.clean<-gsub("\u00a3","puntamerkki",object.to.clean,perl=T);object.to.clean<-gsub("\\\u0024","dollarimerkki",object.to.clean,perl=T) #protect pound and dollar signs
object.to.clean<-gsub("\u20ac","euromerkki",object.to.clean,perl=T);object.to.clean<-gsub("(?<=\\d)\u003a(?=\\d)","kellonaikakaksoispiste",object.to.clean,perl=T) #protect euro sign and hour-minute separator
object.to.clean<-gsub("\u0025","prosenttimerkki",object.to.clean,perl=T) #protect percent sign
object.to.clean<-gsub("\u2030","promillemerkki",object.to.clean,perl=T) #protect permille sign
object.to.clean<-gsub("&#8209;","rikkomatonyhdysviiva",object.to.clean,perl=T)
object.to.clean<-gsub("\\b","\u0020",object.to.clean,perl=T) #separate remaining punctuation from words_________________________________________________________
object.to.clean<-gsub("yhdysviiva","\u002d",object.to.clean,perl=T);object.to.clean<-gsub("suojattupiste","\\\u002e",object.to.clean,perl=T) #restore hyphens and protected dots
object.to.clean<-gsub("tuhansienerotin","\u002c",object.to.clean,perl=T);object.to.clean<-gsub("nheittomerkkit","\u0020n\u0027t",object.to.clean,perl=T) #restore thousands separator&n't
object.to.clean<-gsub("kellonaikakaksoispiste","\u003a",object.to.clean,perl=T) #restore hour-minute separator
object.to.clean<-gsub("dollarimerkki","\\\u0024",object.to.clean,perl=T);object.to.clean<-gsub("puntamerkki","\u00a3",object.to.clean,perl=T) #restore dollar and pound signs
object.to.clean<-gsub("euromerkki","\u20ac",object.to.clean,perl=T);object.to.clean<-(gsub("heittomerkki","\u0020\u0027",object.to.clean,perl=T)) #restore euro sign and apostrophe
object.to.clean<-gsub("([^\\w\\s])([^\\w\\s])","\\1\u0020\\2\u0020",object.to.clean,perl=T) #separate contiguous punctuation marks
object.to.clean<-gsub("urlmerkki","\u003a\u002f\u002f",object.to.clean,perl=T) #restore :// in urls
object.to.clean<-gsub("kenoviiva","\u002f",object.to.clean,perl=T) #restore / in urls and fractions
object.to.clean<-gsub("otsikkomerkki","\u003ch\u003e",object.to.clean,perl=T);object.to.clean<-gsub("kappalemerkki","\u003cp\u003e",object.to.clean,perl=T) #restore <h> and <p>
object.to.clean<-gsub("kolmoispiste","\u0020\\\u002e\\\u002e\\\u002e\u0020",object.to.clean,perl=T) #restore ...
object.to.clean<-gsub("prosenttimerkki","\u0025",object.to.clean,perl=T) #restore percent sign
object.to.clean<-gsub("promillemerkki","\u2030",object.to.clean,perl=T) #restore permille sign
object.to.clean<-gsub("rikkomatonyhdysviiva","\u2011",object.to.clean,perl=T)
object.to.clean<-gsub("\u0024","\u0020",object.to.clean,perl=T) #make sure every line ends with a space as they do in the NOW corpus.
object.to.clean<-gsub("[\u0020]{2,}","\u0020",object.to.clean,perl=T);object.to.clean<-gsub("(?<=\u005e)\u0020+","",object.to.clean,perl=T) #truncate spaces
cat(object.to.clean,file=output.file,sep="\n") #output the result to the file specified (or the default one)
cat("The clean-up operations have been performed and the output printed to",output.file," and to the vector you (hopefully) specified. Good luck with the results!\n")
return(object.to.clean)}
prepare.text(putsi)
knitr::opts_chunk$set(echo = TRUE)
(crosstab<-matrix(ncol = 2,c(647,2,622,27),dimnames =
list(c("smoker","non-smoker"),c("cases","controls"))))
addmargins(crosstab)
(odds.smoke.cases<-(647/649)/(1-(647/649)))
(odds.smoke.controls<-(622/649)/(1-(622/649)))
(OR.smoking<-odds.smoke.cases/odds.smoke.controls)
chisq.test(crosstab, correct = FALSE)
addmargins(crosstab2 <- matrix(ncol=2,
c(57,87,118,185),
dimnames = list(c("exposed","non-exposed"),
c("ill","healthy"))))
chisq.test(crosstab2, correct = FALSE)
(stratum1<-matrix(ncol=2, c(16,50,80,165),
dimnames=list(c("exposed","non-exposed"),"Stratum 1"=c("ill","healthy"))))
(stratum2<-matrix(ncol=2, c(41,37,38,20),
dimnames=list(c("exposed","non-exposed"),"Stratum 2"=c("ill","healthy"))))
(OR.stratum1<-(16/80)/(50/165))
(OR.stratum2<-(41/38)/(37/20))
(x2.stratum1<-chisq.test(stratum1, correct = FALSE))
(x2.stratum2<-chisq.test(stratum2, correct = FALSE))
(commonOR.manual<-(((16*165)/311)+((41*20)/136))/(((80*50)/311)+((38*37)/136)))
(both.strata<-array(dim=c(2,2,2), c(stratum1,stratum2)))
mantelhaen.test(both.strata, correct = FALSE)
n <- 30
i <- 1:n
x <- (i-15.5)/14.5
B0.I <- log(0.3/(1-0.3))
B1.I <- 2
logodds.I <- B0.I + B1.I*x[i]
p.I <- exp(logodds.I)/(1+exp(logodds.I))
library(ggplot2)
qplot(x,p.I,geom = "line",main=("p = logit^-1(B0.I + B1.I*x)"), ylab="p")
#Second model:
B0.II <- log(0.3/(1-0.3))
B1.II <- -2
logodds.II <- B0.II + B1.II*x[i]
p.II <- exp(logodds.II)/(1+exp(logodds.II))
#Third model:
B0.III <- log(0.7/(1-0.7))
B1.III <- 2
logodds.III <- B0.III + B1.III*x[i]
p.III <- exp(logodds.III)/(1+exp(logodds.III))
#Storing all this data in one data frame (for plotting purposes):
OurData <- data.frame(i, x,
B0.I, B1.I, logodds.I, p.I,
B0.II, B1.II, logodds.II, p.II,
B0.III, B1.III, logodds.III, p.III)
#Plotting the three models in one chart:
ggplot(data=OurData, aes(x=x, y=p.I)) +
ggtitle("Probability as a function of X with three different\ncombinations of B0 and B1") +
ylab("p") +
scale_y_continuous(limits=c(0,1),
breaks=seq(from=0,to=1,by=0.1)) +
scale_x_continuous(breaks=seq(from=-1,to=1,by=0.2)) +
geom_line(aes(y=p.I,x=x,color="p.I")) +
geom_line(aes(y=p.II,x=x,color="p.II")) +
geom_line(aes(y=p.III,x=x,color="p.III"))
exp(-2)/(1+exp(-2))
p <- 0.119203
round(digits=5,
log(p/(1-p))
)
plot(x,p.I,type="l")
lines(x,P.II,lt=2)
lines(x,p.II,lt=2)
lines(x,p.III,lt=3)
knitr::opts_chunk$set(echo = TRUE)
(juxtaposed.strata<-array(dim=c(2,2,2), c(stratum1,stratum2)))
knitr::opts_chunk$set(echo = TRUE)
(crosstab<-matrix(ncol = 2,c(647,2,622,27),dimnames =
list(c("smoker","non-smoker"),c("cases","controls"))))
addmargins(crosstab)
(odds.smoke.cases<-(647/649)/(1-(647/649)))
(odds.smoke.controls<-(622/649)/(1-(622/649)))
(OR.smoking<-odds.smoke.cases/odds.smoke.controls)
chisq.test(crosstab, correct = FALSE)
addmargins(crosstab2 <- matrix(ncol=2,
c(57,87,118,185),
dimnames = list(c("exposed","non-exposed"),
c("ill","healthy"))))
chisq.test(crosstab2, correct = FALSE)
(stratum1<-matrix(ncol=2, c(16,50,80,165),
dimnames=list(c("exposed","non-exposed"),"Stratum 1"=c("ill","healthy"))))
(stratum2<-matrix(ncol=2, c(41,37,38,20),
dimnames=list(c("exposed","non-exposed"),"Stratum 2"=c("ill","healthy"))))
(OR.stratum1<-(16/80)/(50/165))
(OR.stratum2<-(41/38)/(37/20))
(x2.stratum1<-chisq.test(stratum1, correct = FALSE))
(x2.stratum2<-chisq.test(stratum2, correct = FALSE))
(commonOR.manual<-(((16*165)/311)+((41*20)/136))/(((80*50)/311)+((38*37)/136)))
(juxtaposed.strata<-array(dim=c(2,2,2), c(stratum1,stratum2)))
mantelhaen.test(juxtaposed.strata, correct = FALSE)
n <- 30
i <- 1:n
x <- (i-15.5)/14.5
B0.I <- log(0.3/(1-0.3))
B1.I <- 2
logodds.I <- B0.I + B1.I*x[i]
p.I <- exp(logodds.I)/(1+exp(logodds.I))
library(ggplot2)
qplot(x,p.I,geom = "line",main=("p = logit^-1(B0.I + B1.I*x)"), ylab="p")
#Second model:
B0.II <- log(0.3/(1-0.3))
B1.II <- -2
logodds.II <- B0.II + B1.II*x[i]
p.II <- exp(logodds.II)/(1+exp(logodds.II))
#Third model:
B0.III <- log(0.7/(1-0.7))
B1.III <- 2
logodds.III <- B0.III + B1.III*x[i]
p.III <- exp(logodds.III)/(1+exp(logodds.III))
#Storing all this data in one data frame (for plotting purposes):
OurData <- data.frame(i, x,
B0.I, B1.I, logodds.I, p.I,
B0.II, B1.II, logodds.II, p.II,
B0.III, B1.III, logodds.III, p.III)
#Plotting the three models in one chart:
ggplot(data=OurData, aes(x=x, y=p.I)) +
ggtitle("Probability as a function of X with three different\ncombinations of B0 and B1") +
ylab("p") +
scale_y_continuous(limits=c(0,1),
breaks=seq(from=0,to=1,by=0.1)) +
scale_x_continuous(breaks=seq(from=-1,to=1,by=0.2)) +
geom_line(aes(y=p.I,x=x,color="p.I")) +
geom_line(aes(y=p.II,x=x,color="p.II")) +
geom_line(aes(y=p.III,x=x,color="p.III"))
exp(-2)/(1+exp(-2))
p <- 0.119203
round(digits=5,
log(p/(1-p))
)
log(0.3/(1-0.3))
log(0.7/(1-0.7))
ggplot(data=OurData, aes(x=x, y=p.I)) +
ggtitle("Probability as a function of X with three different\ncombinations of B0 and B1") +
ylab("p") +
scale_y_continuous(limits=c(0,1),
breaks=seq(from=0,to=1,by=0.1)) +
scale_x_continuous(breaks=seq(from=-1,to=1,by=0.2)) +
geom_line(aes(y=p.I,x=x,color="p.I")) +
geom_line(aes(y=p.II,x=x,color="p.II")) +
geom_line(aes(y=p.III,x=x,color="p.III")) + geom_vline(0)
ggplot(data=OurData, aes(x=x, y=p.I)) +
ggtitle("Probability as a function of X with three different\ncombinations of B0 and B1") +
ylab("p") +
scale_y_continuous(limits=c(0,1),
breaks=seq(from=0,to=1,by=0.1)) +
scale_x_continuous(breaks=seq(from=-1,to=1,by=0.2)) +
geom_line(aes(y=p.I,x=x,color="p.I")) +
geom_line(aes(y=p.II,x=x,color="p.II")) +
geom_line(aes(y=p.III,x=x,color="p.III")) + geom_vline(aes(x=0))
ggplot(data=OurData, aes(x=x, y=p.I)) +
ggtitle("Probability as a function of X with three different\ncombinations of B0 and B1") +
ylab("p") +
scale_y_continuous(limits=c(0,1),
breaks=seq(from=0,to=1,by=0.1)) +
scale_x_continuous(breaks=seq(from=-1,to=1,by=0.2)) +
geom_line(aes(y=p.I,x=x,color="p.I")) +
geom_line(aes(y=p.II,x=x,color="p.II")) +
geom_line(aes(y=p.III,x=x,color="p.III")) + geom_vline(aes(xintercept=0))
knitr::opts_chunk$set(echo = TRUE)
(crosstab<-matrix(ncol = 2,c(647,2,622,27),dimnames =
list(c("smoker","non-smoker"),c("cases","controls"))))
addmargins(crosstab)
(odds.smoke.cases<-(647/649)/(1-(647/649)))
(odds.smoke.controls<-(622/649)/(1-(622/649)))
(OR.smoking<-odds.smoke.cases/odds.smoke.controls)
chisq.test(crosstab, correct = FALSE)
addmargins(crosstab2<-matrix(ncol=2, c(57,87,118,185),
dimnames = list(c("exposed","non-exposed"),c("ill","healthy"))))
chisq.test(crosstab2, correct = FALSE)
(stratum1<-matrix(ncol=2, c(16,50,80,165), dimnames=
list(c("exposed","non-exposed"),"Stratum 1"=c("ill","healthy"))))
(stratum2<-matrix(ncol=2,
c(41,37,38,20),dimnames=
list(c("exposed","non-exposed"),"Stratum 2"=c("ill","healthy"))))
(OR.stratum1<-(16/80)/(50/165))
(OR.stratum2<-(41/38)/(37/20))
(x2.stratum1<-chisq.test(stratum1, correct = FALSE))
(x2.stratum2<-chisq.test(stratum2, correct = FALSE))
(commonOR.manual<-(((16*165)/311)+((41*20)/136))/(((80*50)/311)+((38*37)/136)))
(juxtaposed.strata<-array(dim=c(2,2,2), c(stratum1,stratum2)))
mantelhaen.test(juxtaposed.strata, correct = FALSE)
#The common parameters:
n <- 30
i <- 1:n
x <- (i-15.5)/14.5
#Model I
B0.I <- log(0.3/(1-0.3))
B1.I <- 2
logodds.I <- B0.I + B1.I*x[i]
p.I <- exp(logodds.I)/(1+exp(logodds.I))
#Model II:
B0.II <- log(0.3/(1-0.3))
B1.II <- -2
logodds.II <- B0.II + B1.II*x[i]
p.II <- exp(logodds.II)/(1+exp(logodds.II))
#Model III:
B0.III <- log(0.7/(1-0.7))
B1.III <- 2
logodds.III <- B0.III + B1.III*x[i]
p.III <- exp(logodds.III)/(1+exp(logodds.III))
#Storing all the data in one data frame (for plotting purposes):
OurData <- data.frame(i, x,
B0.I, B1.I, logodds.I, p.I,
B0.II, B1.II, logodds.II, p.II,
B0.III, B1.III, logodds.III, p.III)
#Plotting all three models on one X-Y plane:
library(ggplot2)
ggplot(data=OurData, aes(x=x, y=p.I)) +
ggtitle("Probability as a function of X with three different \ncombinations of B0 and B1",
subtitle = "n = 30") +
ylab("p") +
scale_y_continuous(limits=c(0,1),
breaks=seq(from=0,to=1,by=0.1)) +
scale_x_continuous(breaks=seq(from=-1,to=1,by=0.2)) +
geom_line(aes(y=p.I,x=x,color="p.I")) +
geom_line(aes(y=p.II,x=x,color="p.II")) +
geom_line(aes(y=p.III,x=x,color="p.III")) +
geom_vline(aes(xintercept=0))
exp(-2)/(1+exp(-2))
p <- 0.119203
round(log(p/(1-p)), digits=6)
round(log(p/(1-p)), digits=5)
matrix(ncol=2,
c(41,37,38,20),dimnames=
list("Stratum 3"=c("exposed","non-exposed"),=c("ill","healthy")))
matrix(ncol=2,
c(41,37,38,20),dimnames=
list(Stratum3=c("exposed","non-exposed"),=c("ill","healthy")))
matrix(ncol=2,
c(41,37,38,20),dimnames=
list(Stratum3=c("exposed","non-exposed"),c("ill","healthy")))
library("gsubfn", lib.loc="~/R/win-library/3.3")
COCAspok <- read.delim(file=choose.files(), header=FALSE, quote="", stringsAsFactors=FALSE, skipNul = T)
ketju1<-paste(COCAspok$V1,COCAspok$V3,sep="_",collapse=" ")
ketju2<-gsub(" {2,}"," ",ketju1,perl=T)
ketju3<-gsub("(\\S+)_y","\\1_\\1",ketju2,perl=T)
substr(ketju3,5000000,5001000)
cat(ketju2,file="COCAspok2012_c7.txt",sep="\n")
setwd(dir="c:/users/juho/desktop")
setwd("ALR")
N<-15
n<-2*N+1
x1<-c(-N:N)/N
x2<-c(rep(0,round(n/3)),rep(1,n-round(n/3)))
x0<-rep(1,n)
X<-cbind(x0,x1,x2)
str(X)
class(X)
X
B<-c(log(0.3/0.7),1,-0.3)
B
lp<-X%*%B
p<-exp(lp)/(1+exp(lp))
p
mean(p)
set.seed(100) #(This is to make sure that the randomly generated outcomes
U<-runif(n)
U
y<-as.numeric(U<p)
y
p
mean(p)
mean(U)
mean(y)
library(ggplot2)
the.data<-data.frame(x0,x1,x2,lp,p,y)
ggplot(data=the.data, aes(x=x1, y=y)) +
scale_y_continuous(limits=c(0,1), breaks=seq(from=0,to=1,by=0.1)) +
scale_x_continuous(breaks=seq(from=-1,to=1,by=0.2)) +
geom_point(aes(y=y,x=x1)) +
geom_line(aes(y=p,x=x1),linetype="dashed") +
geom_vline(xintercept = 0)
